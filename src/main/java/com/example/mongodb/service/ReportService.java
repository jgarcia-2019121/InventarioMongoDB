package com.example.mongodb.service;

import com.example.mongodb.model.Product;
import com.example.mongodb.repository.ProductRepository;
import com.itextpdf.text.*;
import com.itextpdf.text.pdf.PdfPCell;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfWriter;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.io.ByteArrayOutputStream;
import java.util.List;

@Service
public class ReportService {

    @Autowired
    private ProductRepository productRepository;

    public byte[] generateProductReport() {
        List<Product> products = productRepository.findAll();
        Document document = new Document();
        ByteArrayOutputStream out = new ByteArrayOutputStream();

        try {
            PdfWriter.getInstance(document, out);
            document.open();

            // Agregar título centrado
            Paragraph title = new Paragraph("Product Report", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 18, BaseColor.BLACK));
            title.setAlignment(Element.ALIGN_CENTER);
            document.add(title);

            // Espacio entre título y contenido
            document.add(new Paragraph(" "));

            // Crear tabla con 3 columnas: Nombre, Cantidad, Precio
            PdfPTable table = new PdfPTable(3);
            table.setWidthPercentage(100); // Ajustar tabla al 100% del ancho
            table.setSpacingBefore(10f);
            table.setSpacingAfter(10f);

            // Definir anchos de columnas
            float[] columnWidths = {2f, 1f, 1f};
            table.setWidths(columnWidths);

            // Encabezado de la tabla (Nombre, Cantidad, Precio)
            PdfPCell cell;

            cell = new PdfPCell(new Phrase("Product Name", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 12, BaseColor.WHITE)));
            cell.setBackgroundColor(BaseColor.GRAY);
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase("Quantity", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 12, BaseColor.WHITE)));
            cell.setBackgroundColor(BaseColor.GRAY);
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase("Price", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 12, BaseColor.WHITE)));
            cell.setBackgroundColor(BaseColor.GRAY);
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            table.addCell(cell);

            // Llenar la tabla con los datos de los productos
            for (Product product : products) {
                table.addCell(new PdfPCell(new Phrase(product.getName())));
                table.addCell(new PdfPCell(new Phrase(String.valueOf(product.getQuantity()))));
                table.addCell(new PdfPCell(new Phrase("$" + product.getPrice())));
            }

            // Agregar la tabla al documento
            document.add(table);

            // Pie de página o información adicional
            Paragraph footer = new Paragraph("Generated by Jonathan Garcia", FontFactory.getFont(FontFactory.HELVETICA, 10, BaseColor.GRAY));
            footer.setAlignment(Element.ALIGN_CENTER);
            document.add(footer);

            document.close();
        } catch (DocumentException e) {
            e.printStackTrace();
        }

        return out.toByteArray(); // Retorna el archivo PDF como bytes
    }
}